// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: authorization.proto

package authorization

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorithationClient is the client API for Authorithation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorithationClient interface {
	// Sends a greeting
	SignUp(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ReplyMess, error)
	// Sends another greeting
	SignIn(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Token, error)
	CheckToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*TokenResp, error)
}

type authorithationClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorithationClient(cc grpc.ClientConnInterface) AuthorithationClient {
	return &authorithationClient{cc}
}

func (c *authorithationClient) SignUp(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ReplyMess, error) {
	out := new(ReplyMess)
	err := c.cc.Invoke(ctx, "/authorithationProto.Authorithation/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorithationClient) SignIn(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/authorithationProto.Authorithation/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorithationClient) CheckToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*TokenResp, error) {
	out := new(TokenResp)
	err := c.cc.Invoke(ctx, "/authorithationProto.Authorithation/CheckToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorithationServer is the server API for Authorithation service.
// All implementations must embed UnimplementedAuthorithationServer
// for forward compatibility
type AuthorithationServer interface {
	// Sends a greeting
	SignUp(context.Context, *UserRequest) (*ReplyMess, error)
	// Sends another greeting
	SignIn(context.Context, *LoginRequest) (*Token, error)
	CheckToken(context.Context, *Token) (*TokenResp, error)
	mustEmbedUnimplementedAuthorithationServer()
}

// UnimplementedAuthorithationServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorithationServer struct {
}

func (UnimplementedAuthorithationServer) SignUp(context.Context, *UserRequest) (*ReplyMess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedAuthorithationServer) SignIn(context.Context, *LoginRequest) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedAuthorithationServer) CheckToken(context.Context, *Token) (*TokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckToken not implemented")
}
func (UnimplementedAuthorithationServer) mustEmbedUnimplementedAuthorithationServer() {}

// UnsafeAuthorithationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorithationServer will
// result in compilation errors.
type UnsafeAuthorithationServer interface {
	mustEmbedUnimplementedAuthorithationServer()
}

func RegisterAuthorithationServer(s grpc.ServiceRegistrar, srv AuthorithationServer) {
	s.RegisterService(&Authorithation_ServiceDesc, srv)
}

func _Authorithation_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorithationServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorithationProto.Authorithation/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorithationServer).SignUp(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorithation_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorithationServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorithationProto.Authorithation/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorithationServer).SignIn(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorithation_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorithationServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorithationProto.Authorithation/CheckToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorithationServer).CheckToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

// Authorithation_ServiceDesc is the grpc.ServiceDesc for Authorithation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authorithation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authorithationProto.Authorithation",
	HandlerType: (*AuthorithationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _Authorithation_SignUp_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _Authorithation_SignIn_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _Authorithation_CheckToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authorization.proto",
}
